Rsa Service {

    public String encrypt(String partnerCode, String message) {
        try {
            SignatureKey key = getKeyByPartnerCode(partnerCode);
            if (key == null) {
                return null;
            }
            return RsaUtil.encryptWithPublicKey(message, key.getKey(), key.getFileName());
        } catch (Exception ex) {
            log.error("[Encryption][RsaService][encrypt][Exception] ex: {}", ex.getMessage());
        }
        return null;
    }

    public String decrypt(String partnerCode, String message) {
        try {
            SignatureKey key = getKeyByPartnerCode(partnerCode);
            if (key == null) {
                return null;
            }
            return RsaUtil.decryptWithPrivateKey(message, key.getKey());
        } catch (Exception ex) {
            log.error("[Encryption][RsaService][decrypt][Exception] ex: {}", ex.getMessage());
        }
        return null;
    }
}

RsaUtil {
    public static String encryptWithPublicKey(String inputStr, String key, String fileName) throws Exception {
        PublicKey publicKey = null;
        if (fileName.endsWith(".cer") || fileName.endsWith(".crt")) {
            publicKey = getPublicKeyFromCertString(key);
        } else {
            publicKey = getPublicKeyFromString(key);
        }
        Cipher cipher = Cipher.getInstance(RSA_MODE);
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] bytes = cipher.doFinal(inputStr.getBytes(StandardCharsets.UTF_8));
        return new String(Base64.encodeBase64(bytes));
    }

    public static String decryptWithPrivateKey(String inputStr, String key) throws Exception {
        PrivateKey privateKey = getPrivateKeyFromString(key);
        Cipher cipher = Cipher.getInstance(RSA_MODE);
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] bytes = cipher.doFinal(Base64.decodeBase64(inputStr));
        return new String(bytes);
    }

}
